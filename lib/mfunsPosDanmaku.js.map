{"version":3,"file":"mfunsPosDanmaku.js","mappings":"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","sources":["webpack://mfuns-pos-danmaku/./src/utils/randomHash.ts","webpack://mfuns-pos-danmaku/./src/Danmaku/DanmakuParser.ts","webpack://mfuns-pos-danmaku/./src/Timeline/ShortSegLine.ts","webpack://mfuns-pos-danmaku/./src/Timeline/LongSegLine.ts","webpack://mfuns-pos-danmaku/./src/Timeline/Timeline.ts","webpack://mfuns-pos-danmaku/./src/Timeline/TimelineDriver.ts","webpack://mfuns-pos-danmaku/./src/Stage/Renderer/DomRenderer.ts","webpack://mfuns-pos-danmaku/./src/utils/numberToColor.ts","webpack://mfuns-pos-danmaku/./src/Stage/Renderer/AnimationRenderer.ts","webpack://mfuns-pos-danmaku/./src/Stage/Renderer/Renderer.ts","webpack://mfuns-pos-danmaku/./src/Stage/Stage.ts","webpack://mfuns-pos-danmaku/./src/Controller.ts","webpack://mfuns-pos-danmaku/./src/index.ts"],"sourcesContent":["/** 获取随机Hash值 */\r\n\r\nfunction initHash() {\r\n  let count: number = 100;\r\n\r\n  return function (hashLength: number = 8) {\r\n    let ar: Array<string> = [\r\n      \"0\",\r\n      \"1\",\r\n      \"2\",\r\n      \"3\",\r\n      \"4\",\r\n      \"5\",\r\n      \"6\",\r\n      \"7\",\r\n      \"8\",\r\n      \"9\",\r\n      \"a\",\r\n      \"b\",\r\n      \"c\",\r\n      \"d\",\r\n      \"e\",\r\n      \"f\",\r\n      \"g\",\r\n      \"h\",\r\n      \"i\",\r\n      \"j\",\r\n      \"k\",\r\n      \"l\",\r\n      \"m\",\r\n      \"n\",\r\n      \"o\",\r\n      \"p\",\r\n      \"q\",\r\n      \"r\",\r\n      \"s\",\r\n      \"t\",\r\n      \"u\",\r\n      \"v\",\r\n      \"w\",\r\n      \"x\",\r\n      \"y\",\r\n      \"z\",\r\n    ];\r\n    let hs: Array<string> = [];\r\n    let hl: number = Number(hashLength);\r\n    let al: number = ar.length;\r\n    for (let i = 0; i < hl; i++) {\r\n      hs.push(ar[Math.floor(Math.random() * al)]);\r\n    }\r\n    count++;\r\n    return hs.join(\"\") + `${count}`;\r\n  };\r\n}\r\n\r\nconst randomHash: (hashLength: number) => string = initHash();\r\n\r\nexport default randomHash;\r\n","import randomHash from \"../utils/randomHash\";\r\nimport { DanmakuData } from \"./DanmakuData\";\r\nimport { DanmakuInterface } from \"./DanmakuInterface\";\r\nimport { PosData } from \"./PosData\";\r\n\r\n/**\r\n * 弹幕转换器\r\n * 将弹幕字符串转换为弹幕\r\n */\r\n\r\nexport class DanmakuParser {\r\n  constructor() {}\r\n  public parse(d: DanmakuInterface): DanmakuData | undefined {\r\n    /** 转换单条弹幕 */\r\n    try {\r\n      let danmaku: PosData = JSON.parse(d.content);\r\n      console.log(danmaku)\r\n      let id: number | string | null = d.id || null;\r\n      let rid: string = randomHash(8);\r\n      let start: number = danmaku[\"start\"] || d.time || 0;\r\n      let duration: number = this.getDuration(danmaku);\r\n      let end: number = start + duration;\r\n      let danmakuData: DanmakuData = {\r\n        danmaku,\r\n        id,\r\n        rid,\r\n        start,\r\n        duration,\r\n        end,\r\n      };\r\n      return danmakuData;\r\n    } catch (error) {\r\n      console.log(`弹幕格式错误-id:${d.id}`);\r\n    }\r\n  }\r\n  /** 获得一条弹幕的持续时间 */\r\n  public getDuration(danmaku: PosData) {\r\n    let duration = danmaku.duration || 0;\r\n    danmaku.animations?.forEach((k) => {\r\n      duration += k.duration || 0;\r\n    });\r\n    return duration;\r\n  }\r\n}\r\n","import { DanmakuData } from \"../Danmaku/DanmakuData\"\r\n\r\n/**\r\n * 短段时间轴\r\n * 以1s=1000ms为一个短段\r\n */\r\n\r\nexport class ShortSegLine {\r\n  /** 列表 */\r\n  public list: Array<DanmakuData[]>\r\n  constructor() {\r\n    this.list = []\r\n  }\r\n  /** 添加一条弹幕 */\r\n  public add(dan:DanmakuData) {\r\n    let s = Math.floor(dan.start / 1000)  // 获取开始时所在的秒段\r\n    this.listAdd(s, dan)      // 将弹幕添加进对应的秒段中\r\n  }\r\n  /** 删除一条弹幕 */\r\n  public remove(dan:DanmakuData) {\r\n    let s = Math.floor(dan.start / 1000)  // 获取开始时所在的秒段\r\n    let i = this.list[s]?.indexOf(dan)    // 在该秒段内查找弹幕位置并删除\r\n    i && i != -1 && this.list[s]?.splice(i, 1)\r\n  }\r\n  /** 获取一个分段的弹幕 */\r\n  public getSegList(i:number): DanmakuData[] {\r\n    return this.listGet(i)\r\n  }\r\n  /** 清空时间轴 */\r\n  public clear() {\r\n    this.list = []\r\n  }\r\n  private listAdd(i:number, item:any) {\r\n    if (!this.list[i]) {\r\n      this.list[i] = []\r\n    }\r\n    this.list[i].push(item)\r\n  }\r\n  private listGet(i:number): DanmakuData[] {\r\n    return this.list[i] || []\r\n  }\r\n}","import { DanmakuData } from \"../Danmaku/DanmakuData\"\r\n\r\n/**\r\n * 长段时间轴\r\n * 以60s=60000ms为一个长段\r\n */\r\n\r\nexport class LongSegLine {\r\n  /** 列表 */\r\n  public list: Array<DanmakuData[]>\r\n  constructor() {\r\n    this.list = []\r\n  }\r\n  /** 添加一条弹幕 */\r\n  public add(dan:DanmakuData) {\r\n    let startmin = Math.floor(dan.start / 60000)  // 获取开始时所在的分钟段\r\n    let endmin = Math.floor(dan.end / 60000)    // 获取结束时所在的分钟段\r\n    for (let m = startmin; m <= endmin; m++) {\r\n      this.listAdd(m, dan) // 弹幕存在的任何长段都有该弹幕对象的指针\r\n    }\r\n  }\r\n  /** 删除一条弹幕 */\r\n  public remove(dan:DanmakuData) {\r\n    let startmin = Math.floor(dan.start / 60000)  // 获取开始时所在的分钟段\r\n    let endmin = Math.floor(dan.end / 60000)    // 获取结束时所在的分钟段\r\n    for (let m = startmin; m <= endmin; m++) {  // 在该时段内逐段查找弹幕位置并依次删除\r\n        let i = this.list[m]?.indexOf(dan)\r\n        i && i != -1 && this.list[m]?.splice(i, 1)\r\n    }\r\n  }\r\n  /** 获取一个分段的弹幕 */\r\n  public getSegList(i:number): DanmakuData[] {\r\n    return this.listGet(i)\r\n  }\r\n  /** 清空时间轴 */\r\n  public clear() {\r\n    this.list = []\r\n  }\r\n  private listAdd(i:number, item:any) {\r\n    if (!this.list[i]) {\r\n      this.list[i] = []\r\n    }\r\n    this.list[i]?.push(item)\r\n  }\r\n  private listGet(i:number): DanmakuData[] {\r\n    return this.list[i] || []\r\n  }\r\n}","import { DanmakuData } from \"../Danmaku/DanmakuData\";\r\nimport { ShortSegLine } from \"./ShortSegLine\";\r\nimport { LongSegLine } from \"./LongSegLine\";\r\n\r\n/** 弹幕时间轴 */\r\n\r\nexport class Timeline {\r\n  /** 短段时间轴 */\r\n  public shortSegLine: ShortSegLine;\r\n  /** 长段时间轴 */\r\n  public longSegLine: LongSegLine;\r\n\r\n  constructor() {\r\n    this.shortSegLine = new ShortSegLine();\r\n    this.longSegLine = new LongSegLine();\r\n  }\r\n  /** 获取下一秒段的弹幕数据 */\r\n  public getNextList(s: number) {\r\n    return this.shortSegLine.getSegList(s + 1); // 在到达s秒的时候提前获取s+1秒段的弹幕，是为了减少命令执行延迟带来的影响\r\n  }\r\n  /** 获取seek后的弹幕数据\r\n   * 包括当前秒段及下一秒段弹幕、该秒段前60秒段所有未结束弹幕、当前长段未结束弹幕 */\r\n  public getSeekList(time: number) {\r\n    let s = Math.floor(time / 1000);\r\n    let currentSeg = this.shortSegLine.getSegList(s);\r\n    let nextSeg = this.shortSegLine.getSegList(s + 1);\r\n    let beforeDanmakuList = this.getBeforeDanmaku(time);\r\n    let longDanmakuList = this.getLongDanmaku(time);\r\n    let list: DanmakuData[] = [];\r\n    list = list.concat(longDanmakuList, beforeDanmakuList, currentSeg, nextSeg);\r\n    return list;\r\n  }\r\n  /** 获取该秒段之前60个秒段的未结束弹幕数据 */\r\n  private getBeforeDanmaku(time: number) {\r\n    let s = Math.floor(time / 1000);\r\n    let list: DanmakuData[] = [];\r\n    for (let t = s < 60 ? 0 : s - 60; t < s; t++) {\r\n      let seg = this.shortSegLine.list[t];\r\n      seg?.forEach((dan) => {\r\n        if (dan.end > time) {\r\n          list.push(dan);\r\n        }\r\n      });\r\n    }\r\n    return list;\r\n  }\r\n  /** 获取该长段中未结束弹幕(开始时间早于所在时间秒段的60个秒段之前) */\r\n  private getLongDanmaku(time: number): DanmakuData[] {\r\n    let s = Math.floor(time / 1000);\r\n    let m = Math.floor(time / 60000);\r\n    let list: DanmakuData[] = [];\r\n    let seg = this.longSegLine.list[m];\r\n    seg?.forEach((dan) => {\r\n      if (dan.start < (s - 60) * 1000 && dan.end > time) {\r\n        list.push(dan);\r\n      }\r\n    });\r\n    return list;\r\n  }\r\n\r\n  /** 清空时间轴 */\r\n  public clear() {\r\n    this.shortSegLine.clear();\r\n    this.longSegLine.clear();\r\n  }\r\n  /** 添加弹幕到时间轴 */\r\n  public add(dan: DanmakuData) {\r\n    this.shortSegLine.add(dan);\r\n    // 如果时间大于60s=60000ms, 则算作长弹幕, 加入长段时间轴中\r\n    if (dan.duration > 60000) {\r\n      this.longSegLine.add(dan);\r\n    }\r\n  }\r\n  /** 移除时间轴上的某条弹幕 */\r\n  public remove(dan: DanmakuData) {\r\n    this.shortSegLine.remove(dan);\r\n    if (dan.duration > 60000) {\r\n      this.longSegLine.remove(dan);\r\n    }\r\n  }\r\n}\r\n","import { Timeline } from \"./Timeline\";\r\nimport { DanmakuData } from \"../Danmaku/DanmakuData\";\r\n\r\n/**\r\n * 时间轴驱动器\r\n * 控制时间轴的时间状态, 根据播放状态获取当前时间, 并从时间轴中获取弹幕\r\n */\r\n\r\nexport class TimelineDriver {\r\n  /** 时间轴 */\r\n  protected timeline: Timeline;\r\n  /** 定时器(只读), 用于获取当前时间 */\r\n  protected getTime: () => number;\r\n  /** 秒数(弹幕获取时间状态) */\r\n  protected seconds: number;\r\n  /** 毫秒(偏移量) */\r\n  protected milliseconds: number;\r\n  /** 间隔定时器 */\r\n  protected intervalTimer: number;\r\n  /** 延时定时器 */\r\n  protected timeoutTimer: number;\r\n  /** 播放状态 */\r\n  protected isPlaying: boolean = false;\r\n  /** 返回弹幕时需要执行的函数 */\r\n  public onCurrentDanmaku: (result?: DanmakuData[]) => any;\r\n  constructor({\r\n    timeline,\r\n    getTime,\r\n    onCurrentDanmaku,\r\n  }: {\r\n    timeline: Timeline;\r\n    getTime: () => number;\r\n    onCurrentDanmaku?: (result?: DanmakuData[]) => any;\r\n  }) {\r\n    this.timeline = timeline;\r\n    this.getTime = getTime;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n    this.onCurrentDanmaku = onCurrentDanmaku || (() => {});\r\n  }\r\n  /** 时间轴跳转 */\r\n  public seek() {\r\n    let time = this.getTime();\r\n    this.seconds = Math.floor(time / 1000);\r\n    this.milliseconds = time % 1000;\r\n    return this.timeline.getSeekList(time);\r\n  }\r\n  /** 播放 */\r\n  public play() {\r\n    if (!this.isPlaying) {\r\n      this.isPlaying = true;\r\n      this.timeoutTimer = window.setTimeout(() => {\r\n        this.seconds++; // 等待至该秒结束, 进入下一秒段\r\n        this.intervalTimer = window.setInterval(() => {\r\n          this.emitCurrentDanmaku(this.timeline.getNextList(this.seconds));\r\n          this.seconds++;\r\n        }, 1000);\r\n        this.milliseconds = 0;\r\n        window.clearTimeout(this.timeoutTimer);\r\n      }, 1000 - this.milliseconds);\r\n    }\r\n  }\r\n  /** 暂停 */\r\n  public pause() {\r\n    if (this.isPlaying) {\r\n      this.isPlaying = false;\r\n      window.clearTimeout(this.timeoutTimer);\r\n      window.clearInterval(this.intervalTimer);\r\n      this.milliseconds = this.getTime() - this.seconds * 1000;\r\n    }\r\n  }\r\n  private emitCurrentDanmaku(list: DanmakuData[]) {\r\n    this.onCurrentDanmaku(list);\r\n  }\r\n}\r\n","import { DanmakuData } from \"../../Danmaku/DanmakuData\";\r\nimport numberToColor from \"../../utils/numberToColor\";\r\n\r\n/** Dom渲染器, 用于创建弹幕DOM元素 */\r\nexport class DomRenderer {\r\n  protected stageSize: [number, number];\r\n  constructor(stageSize?: [number, number]) {\r\n    this.stageSize = stageSize || [1920, 1080];\r\n  }\r\n  /** 创建弹幕DOM元素 */\r\n  public createDom(dan: DanmakuData): HTMLDivElement {\r\n    let danmaku = dan.danmaku\r\n\r\n    // 创建容器元素\r\n    let container = document.createElement(\"div\");\r\n    container.classList.add(\"pos-danmaku-item\", `pos-danmaku-item-${dan.rid}`);\r\n    container.setAttribute(\"data-id\", String(dan.id))\r\n    container.setAttribute(\"r-id\", dan.rid)\r\n    container.style.position = \"absolute\";\r\n    container.style.display = \"inline-block\";\r\n    container.style.transformOrigin = \"left top\";\r\n\r\n    // 创建内容元素\r\n    let content = document.createElement(\"div\");\r\n    content.classList.add(\"pos-danmaku-item-content\");\r\n    content.innerHTML = danmaku.content\r\n    content.style.whiteSpace = \"pre\";\r\n    content.style.transform = danmaku.anchor ? `translate(${-danmaku.anchor[0]*100}%, ${-danmaku.anchor[1]*100}%)` : \"\";\r\n    \r\n    // 设置基本样式\r\n    content.style.fontSize = this.setRelativeSize(danmaku.size, danmaku.relative) + \"px\"\r\n    content.style.color = this.getColorString(danmaku.color)\r\n    content.style.fontWeight = danmaku.bold ? \"700\" : \"400\";\r\n    content.style.fontFamily = danmaku.font || \"SimHei\";\r\n    content.style.textShadow = danmaku.shadow ? `${this.setRelativeSize(danmaku.shadow[1], danmaku.relative)}px ${this.setRelativeSize(danmaku.shadow[2], danmaku.relative)}px ${this.setRelativeSize(danmaku.shadow[3], danmaku.relative)}px ${this.getColorString(danmaku.shadow[0])} ` : \"\"\r\n    content.style.webkitTextStroke = danmaku.stroke ? `${this.setRelativeSize(danmaku.stroke[1], danmaku.relative)}px ${this.getColorString(danmaku.stroke[0])}` : \"\"\r\n\r\n    container.appendChild(content)\r\n    return container\r\n  }\r\n  /** 根据相对屏幕宽度设置值 */\r\n  public setRelativeSize(value?: number, relative?: number) {\r\n    return value ? value / (relative || 800) * this.stageSize[0] : 0\r\n  }\r\n  public getColorString(value: number | string) {\r\n    if (typeof value == \"number\") {\r\n      return numberToColor(value)\r\n    }\r\n    else {\r\n      return value\r\n    }\r\n  }\r\n}\r\n","export default function numberToColor(n: number) {\r\n  return `#${n.toString(16).padStart(6, \"0\")}`\r\n}\r\n","import { DanmakuData } from \"../../Danmaku/DanmakuData\";\r\nimport { PosData } from \"../../Danmaku/PosData\";\r\n\r\n/** 动画渲染器 */\r\nexport class AnimationRenderer {\r\n  /** 舞台尺寸 */\r\n  protected stageSize: [number, number];\r\n  constructor(stageSize?: [number, number]) {\r\n    this.stageSize = stageSize || [1920, 1080];\r\n  }\r\n  /** 为弹幕DOM元素添加含动画属性的style标签 */\r\n  public addAnimation(dan: DanmakuData, container: HTMLElement) {\r\n    let style = this.getStyleSheet(dan);\r\n    container.appendChild(style);\r\n  }\r\n  /** 生成css动画的style标签 */\r\n  public getStyleSheet(dan: DanmakuData): HTMLStyleElement {\r\n    let danmaku = dan.danmaku\r\n    let stylesheet = document.createElement(\"style\");\r\n    let aniId: string = \"danmaku-A-\" + dan.rid;\r\n    let position: [number, number, number?] = danmaku.position || [0, 0, 0];\r\n    let rotation: [number, number, number] = danmaku.rotation || [0, 0, 0];\r\n    let scale: [number, number] = danmaku.scale || [1, 1];\r\n    // 添加初始属性\r\n    stylesheet.innerText += `.pos-danmaku-item-${dan.rid} { transform: ${this.getCssTransform(position, rotation, scale)} }`;\r\n    // 添加css动画帧属性\r\n    danmaku.animations?.forEach((k, i) => {\r\n      if (k.position) position = k.position;\r\n      if (k.rotation) rotation = k.rotation;\r\n      if (k.scale) scale = k.scale;\r\n      stylesheet.innerText += `@keyframes ${aniId}-${i + 1} { to { transform: ${this.getCssTransform(position, rotation, scale)} } }`;\r\n    });\r\n    // 添加一个空的停留帧\r\n    stylesheet.innerText += `@keyframes ${aniId}-E { }`;\r\n    // 添加动画属性\r\n    stylesheet.innerText += `.pos-danmaku-item-${dan.rid} { animation: ${this.getCssAnimation(dan)}; animation-delay: ${this.getCssAnimationDelay(dan.danmaku)}; animation-fill-mode: forwards; }`;\r\n    return stylesheet;\r\n  }\r\n  /** 获取transform属性值 */\r\n  public getCssTransform(\r\n    position: [number, number, number?],\r\n    rotation: [number, number, number],\r\n    scale: [number, number]\r\n  ): string {\r\n    let css_translate = `translate3d(${position[0] * this.stageSize[0]}px, ${position[1] * this.stageSize[1]}px, 0)`;\r\n    let css_rotateX = `rotateX(${rotation[0]}deg)`;\r\n    let css_rotateY = `rotateY(${rotation[1]}deg)`;\r\n    let css_rotateZ = `rotateZ(${rotation[2]}deg)`;\r\n    let css_scale = `scale(${scale[0]}, ${scale[1]})`;\r\n    return `${css_translate} ${css_rotateX} ${css_rotateY} ${css_rotateZ} ${css_scale}`;\r\n  }\r\n  /** 获取animation属性值 */\r\n  public getCssAnimation(dan: DanmakuData): string {\r\n    let animationLine: string[] = [];\r\n    // 根据动画帧添加动画属性\r\n    dan.danmaku.animations?.forEach((k, i) => {\r\n      animationLine.push(\r\n        `danmaku-A-${dan.rid}-${i + 1} ${k.duration || 0}ms ${[\"linear\", \"ease-in\", \"ease-out\", \"ease-in-out\"][k.ease || 0]}`\r\n      );\r\n    });\r\n    // 添加停留动画属性\r\n    animationLine.push(`danmaku-A-${dan.rid}-E ${dan.danmaku.duration || 0}ms linear`)\r\n    return animationLine.join(\", \");\r\n  }\r\n  /** 获取animation-delay属性值 */\r\n  public getCssAnimationDelay(\r\n    danmaku: PosData,\r\n    offset: number = 0    // 延迟时间\r\n  ): string{\r\n    let delay = 0;\r\n    let delayLine: string[] = [];\r\n    // 为每一动画帧设置delay\r\n    danmaku.animations?.forEach((k: { duration?: number }) => {\r\n      delayLine.push(delay + offset + \"ms\");\r\n      delay += k.duration || 0;\r\n    });\r\n    // 为停留帧设置delay\r\n    delayLine.push(delay + offset + \"ms\")\r\n    return delayLine.join(\", \");\r\n  }\r\n}\r\n","import { DomRenderer } from \"./DomRenderer\";\r\nimport { AnimationRenderer } from \"./AnimationRenderer\";\r\nimport { DanmakuData } from \"../../Danmaku/DanmakuData\";\r\n\r\nexport class Renderer {\r\n  /** Dom渲染器, 用于创建弹幕DOM元素 */\r\n  public domRenderer: DomRenderer;\r\n  /** 动画渲染器, 用于生成对应弹幕的style样式表 */\r\n  public animationRenderer: AnimationRenderer;\r\n  constructor(stageSize?: [number, number]) {\r\n    this.domRenderer = new DomRenderer(stageSize)\r\n    this.animationRenderer = new AnimationRenderer(stageSize)\r\n  }\r\n  /** 生成一个完整的弹幕DOM元素 */\r\n  public render(dan: DanmakuData): HTMLElement {\r\n    let danmakuDom = this.domRenderer.createDom(dan)\r\n    this.animationRenderer.addAnimation(dan, danmakuDom)\r\n    return danmakuDom\r\n  }\r\n}\r\n","import { DanmakuData } from \"../Danmaku/DanmakuData\";\r\nimport { Renderer } from \"./Renderer/Renderer\";\r\n\r\n/**\r\n * 舞台对象\r\n */\r\nexport class Stage {\r\n  /** 舞台样式表 */\r\n  protected stylesheet: HTMLStyleElement;\r\n  /** 舞台容器 */\r\n  readonly container: HTMLElement;\r\n  /** 舞台本体 */\r\n  readonly el: HTMLElement;\r\n  /** 舞台尺寸 */\r\n  readonly size: [number, number];\r\n  /** 视点与舞台的距离 */\r\n  readonly perspective: number\r\n  /** 缩放比例 */\r\n  protected scale: number\r\n  /** 时间获取函数 */\r\n  readonly getTime: () => number;\r\n  /** 渲染器 */\r\n  public renderer: Renderer;\r\n  constructor({ container, size, perspective, getTime }: { container: HTMLElement; size?: [number, number]; perspective?: number; getTime: () => number; }) {\r\n    this.container = container\r\n    this.size = size || [1920, 1080];\r\n    this.perspective = perspective || this.size[0]\r\n    this.scale = 1\r\n    this.getTime = getTime\r\n    // 创建舞台\r\n    this.el = document.createElement(\"div\")\r\n    this.el.classList.add(\"pos-danmaku-stage\")\r\n    this.el.style.width = this.size[0] + \"px\"\r\n    this.el.style.height = this.size[1] + \"px\"\r\n    this.el.style.position = \"absolute\"\r\n    this.el.style.transformOrigin = \"left top\"\r\n    this.el.style.transformStyle = \"preserve-3d\"    // 启用3D效果\r\n    this.el.style.perspective = this.perspective + \"px\" // 视点与弹幕舞台距离\r\n    this.container.appendChild(this.el)\r\n    \r\n    this.resize()\r\n    \r\n    this.stylesheet = document.createElement(\"style\")\r\n    this.stylesheet.innerText += \".pos-danmaku-stage.paused .pos-danmaku-item { animation-play-state: paused }\"\r\n    this.stylesheet.innerText += \".pos-danmaku-item.pos-danmaku-invisible { visibility: hidden }\"\r\n    this.stylesheet.innerText += \".pos-danmaku-item-content { -webkit-text-size-adjust: none; text-size-adjust: none}\"\r\n    this.container.appendChild(this.stylesheet)\r\n\r\n    this.renderer = new Renderer(this.size)\r\n\r\n    this.pause()    // 实例创建后设为暂停状态\r\n  }\r\n  /** 从列表中添加弹幕 */\r\n  public addFromList(list: DanmakuData[]) {\r\n    list.forEach((dan) => {\r\n      this.add(dan)\r\n    });\r\n  }\r\n  /** 添加一条弹幕 */\r\n  public add(dan: DanmakuData) {\r\n    // 检测弹幕是否早已结束\r\n    if(dan.end > this.getTime()) {\r\n      // 获得一条完整的弹幕\r\n      let danmakuElement = this.renderer.render(dan)\r\n      // 添加开始前隐藏机制\r\n      danmakuElement.classList.add(\"pos-danmaku-invisible\")\r\n      danmakuElement.addEventListener(\"animationstart\", ()=>{\r\n        danmakuElement.classList.remove(\"pos-danmaku-invisible\");\r\n      }, {once: true})\r\n      // 添加结束后销毁机制\r\n      danmakuElement.addEventListener(\"animationend\", (e)=>{\r\n        if (e.animationName.substring(e.animationName.length-1) == \"E\") {\r\n          this.el.removeChild(danmakuElement);\r\n        }\r\n      })\r\n      // 根据当前时间设定动画延迟\r\n      danmakuElement.style.animationDelay = this.renderer.animationRenderer.getCssAnimationDelay(dan.danmaku, dan.start - this.getTime())\r\n      // 挂载\r\n      this.mount(danmakuElement)\r\n      return danmakuElement\r\n    } else {\r\n      console.log(`弹幕已结束: id-${dan.id} ${dan.end} < ${this.getTime()}`)\r\n    }\r\n  }\r\n  /** 将弹幕DOM元素挂载到舞台上 */\r\n  private mount(danElement: HTMLElement) {\r\n    this.el.appendChild(danElement)\r\n  }\r\n  /** 根据id删除弹幕元素 */\r\n  public remove_id(id: number | string) {\r\n    let element = this.el.querySelector(`[data-id=${id}]`)\r\n    element && this.el.removeChild(element)\r\n  }\r\n  /** 根据rid删除弹幕元素 */\r\n  public remove_rid(rid: string) {\r\n    let element = this.el.querySelector(`.pos-danmaku-item-${rid}`)\r\n    element && this.el.removeChild(element)\r\n  }\r\n  /** 清屏 */\r\n  public clear() {\r\n    this.el.innerHTML = \"\"\r\n  }\r\n  /** 播放 */\r\n  public play() {\r\n    this.el.classList.remove(\"paused\")\r\n  }\r\n  /** 暂停 */\r\n  public pause() {\r\n    this.el.classList.add(\"paused\")\r\n  }\r\n  public resize() {\r\n    let {width, height} = this.container.getBoundingClientRect()\r\n    if(width / this.size[0] < height / this.size[1]) {    // 宽占满\r\n      this.scale = width / this.size[0]\r\n      this.el.style.transform = `scale(${width / this.size[0]}, ${width / this.size[0]})`\r\n      this.el.style.left = \"0px\"\r\n      this.el.style.top = (height - this.size[1] * this.scale) / 2 + \"px\"\r\n    } else {                                    // 高占满\r\n      this.scale = height / this.size[1]\r\n      this.el.style.transform = `scale(${height / this.size[1]}, ${height / this.size[1]})`\r\n      this.el.style.left = (width - this.size[0] * this.scale) / 2 + \"px\"\r\n      this.el.style.top = \"0px\"\r\n    }\r\n  }\r\n}\r\n","import { DanmakuParser } from \"./Danmaku/DanmakuParser\";\r\nimport { Timeline } from \"./Timeline/Timeline\";\r\nimport { TimelineDriver } from \"./Timeline/TimelineDriver\";\r\nimport { DanmakuInterface } from \"./Danmaku/DanmakuInterface\";\r\nimport { Stage } from \"./Stage/Stage\";\r\n\r\n/**\r\n * 控制器, 控制高级弹幕的处理与渲染流程\r\n * */\r\n\r\nexport class Controller {\r\n  /** 弹幕容器 */\r\n  protected container: HTMLElement;\r\n  /** 播放时时长, 暂停时为当前时长, 播放时为开始播放时的时长 */\r\n  protected playTime: number = 0;\r\n  /** 起始时间戳(播放时时间戳 - 播放时时长), 用于计算播放时间, 暂停时为0 */\r\n  protected startStamp: number = 0;\r\n  /** 暂停状态 */\r\n  protected isPaused: boolean = true;\r\n  /** 间隔定时器 */\r\n  protected intervalTimer: number;\r\n  /** 弹幕数据转换模块 */\r\n  public danmakuParser: DanmakuParser;\r\n  /** 时间轴模块, 用于分段存取弹幕 */\r\n  public timeline: Timeline;\r\n  /** 时间轴驱动器, 用于控制播放状态及返回弹幕渲染列表 */\r\n  public timelineDriver: TimelineDriver;\r\n  /** 舞台模块, 用于分段存取弹幕 */\r\n  public stage: Stage;\r\n\r\n  constructor({\r\n    stageSize,\r\n    container,\r\n  }: {\r\n    stageSize?: [number, number];\r\n    container: HTMLElement;\r\n  }) {\r\n    this.danmakuParser = new DanmakuParser();\r\n    this.timeline = new Timeline();\r\n    this.timelineDriver = new TimelineDriver({\r\n      timeline: this.timeline,\r\n      getTime: () => {\r\n        return this.getTime();\r\n      },\r\n      onCurrentDanmaku: (list) => {\r\n        // 检测到即将产生弹幕时, 扔进舞台模块\r\n        this.stage.addFromList(list || []);\r\n      },\r\n    });\r\n    this.container = container;\r\n    this.stage = new Stage({\r\n      container: this.container,\r\n      size: stageSize,\r\n      getTime: () => {\r\n        return this.getTime();\r\n      },\r\n    });\r\n  }\r\n\r\n  /** 获取当前时间 */\r\n  public getTime(): number {\r\n    if (this.isPaused) {\r\n      return this.playTime; // 暂停时获取时间\r\n    } else {\r\n      return Date.now() - this.startStamp; // 播放时获取时间\r\n    }\r\n  }\r\n\r\n  /** 加载弹幕 */\r\n  public loadDanmaku(dList: DanmakuInterface[]) {\r\n    dList.forEach((d) => {\r\n      this.addDanmaku(d);\r\n    });\r\n  }\r\n  /** 根据播放器弹幕格式添加弹幕 */\r\n  public addDanmaku(d: DanmakuInterface) {\r\n    let dan = this.danmakuParser.parse(d);\r\n    dan && this.timeline.add(dan);\r\n  }\r\n  /** 根据播放器弹幕格式直接播放一条预览弹幕 */\r\n  public playDanmaku(d: DanmakuInterface) {\r\n    let dan = this.danmakuParser.parse(d);\r\n    dan && this.stage.add(dan)  // 不需要放进时间轴, 直接以播放形式放进舞台\r\n  }\r\n  /** 根据id删除弹幕 */\r\n  // public removeDanmaku() {}\r\n  /** 播放 */\r\n  public play() {\r\n    if (this.isPaused) {\r\n      this.isPaused = false;\r\n      this.startStamp = Date.now() - this.playTime;\r\n      this.stage.play()           // 舞台设为播放状态\r\n      this.timelineDriver.play()  // 时间轴播放\r\n    }\r\n  }\r\n  /** 暂停 */\r\n  public pause() {\r\n    if (!this.isPaused) {\r\n      this.isPaused = true;\r\n      this.playTime = Date.now() - this.startStamp; // 设定当前时间\r\n      this.startStamp = 0;\r\n      this.stage.pause()          // 舞台设为暂停状态\r\n      this.timelineDriver.pause() // 时间轴暂停\r\n    }\r\n  }\r\n  /** 跳转 */\r\n  public seek(time: number) {\r\n    this.playTime = time; // 设定当前时间\r\n    if (!this.isPaused) {\r\n      this.startStamp = Date.now() - this.playTime; // 重新获取起始时间戳\r\n    }\r\n    this.refresh()    // 刷新弹幕\r\n  }\r\n  /** 刷新 */\r\n  public refresh() {\r\n    let list = this.timelineDriver.seek();  // 时间轴跳转, 重新获取弹幕内容\r\n    this.stage.clear();             // 清空舞台\r\n    this.stage.addFromList(list);   // 将重新获取的弹幕内容添加到舞台\r\n  }\r\n  /** 清空弹幕 */\r\n  public clearDanmaku() {\r\n    this.timeline.clear() // 清空时间轴\r\n    this.stage.clear()    // 清空舞台\r\n  }\r\n  /** 重置 */\r\n  public reset() {\r\n    this.pause()          // 暂停\r\n    this.timeline.clear() // 清空时间轴\r\n    this.seek(0)          // 跳转至原点(同时清空舞台并复位时间轴)\r\n  }\r\n}\r\n","import { Controller } from \"./Controller\";\r\nimport { InitConfigInterface } from \"./InitConfigInterface\";\r\nimport { DanmakuInterface } from \"./Danmaku/DanmakuInterface\";\r\n\r\nexport class MfunsPosDanmaku{\r\n  /** 弹幕获取函数, 弹幕引擎通过调用该函数拉取弹幕 */\r\n  public getDanmaku: () => DanmakuInterface[];\r\n  /** 控制器 */\r\n  public controller: Controller;\r\n  protected autoResize: Boolean;\r\n  constructor(config: InitConfigInterface) {\r\n    this.controller = new Controller({\r\n      stageSize: config.stageSize || [1920, 1080],\r\n      container: config.container\r\n    });\r\n    this.getDanmaku = config.getDanmaku || (() => {return []})\r\n    // 添加弹幕\r\n    this.autoResize = config.autoResize == undefined ? true : config.autoResize\r\n    if (config.getDanmaku) {\r\n      this.controller.loadDanmaku(this.getDanmaku())\r\n    }\r\n    if (this.autoResize) {\r\n      // 监听大小变化\r\n      window.addEventListener(\"resize\", () => {\r\n        this.controller.stage.resize()\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 播放\r\n   */\r\n  public play() {\r\n    this.controller.play();\r\n  }\r\n  /**\r\n   * 暂停\r\n   */\r\n  public pause() {\r\n    this.controller.pause();\r\n  }\r\n  /**\r\n   * 跳转\r\n   */\r\n  public seek(time: number) {\r\n    this.controller.seek(time);\r\n  }\r\n  /**\r\n   * 当前时间\r\n   * @returns number\r\n   */\r\n  public time() {\r\n    return this.controller.getTime();\r\n  }\r\n  /**\r\n   * 重置弹幕舞台尺寸\r\n   */\r\n  public resize() {\r\n    this.controller.stage.resize();\r\n  }\r\n  /**\r\n   * 重新加载弹幕\r\n   */\r\n  public reload() {\r\n    this.controller.clearDanmaku()    // 清空弹幕\r\n    this.controller.loadDanmaku(this.getDanmaku())    // 加载弹幕\r\n    this.controller.refresh()     // 刷新\r\n  }\r\n  /**\r\n   * 重置引擎\r\n   */\r\n  public reset() {\r\n    this.controller.reset()     // 清空重置\r\n    this.controller.loadDanmaku(this.getDanmaku())    // 加载弹幕\r\n    this.controller.refresh()     // 刷新\r\n  }\r\n  /**\r\n   * 添加一条弹幕\r\n   */\r\n  public addDanmaku(d: DanmakuInterface) {\r\n    this.controller.addDanmaku(d);\r\n  }\r\n  /**\r\n   * 播放一条弹幕(不添加到时间轴)\r\n   */\r\n  public playDanmaku(d: DanmakuInterface) {\r\n    this.controller.playDanmaku(d)\r\n  }\r\n  /**\r\n   * 添加事件监听\r\n   * @param event\r\n   * @param callback\r\n   */\r\n  /**\r\n    public listenerEvent(event: DanmakuEventType, callback: (data: any) => void) {\r\n      DanmakuEvent.listener(event, callback);\r\n    } */\r\n}\r\n\r\n// 添加进全局\r\nif (typeof globalThis !== \"undefined\") {\r\n  globalThis.MfunsPosDanmaku = MfunsPosDanmaku;\r\n} else {\r\n  window[\"MfunsPosDanmaku\"] = MfunsPosDanmaku;\r\n}\r\n"],"names":["count","hashLength","ar","hs","hl","Number","al","length","i","push","Math","floor","random","join","parse","d","danmaku","JSON","content","console","log","id","rid","start","time","duration","this","getDuration","end","error","animations","forEach","k","list","add","dan","s","listAdd","remove","indexOf","splice","getSegList","listGet","clear","item","startmin","endmin","m","shortSegLine","ShortSegLine","longSegLine","LongSegLine","getNextList","getSeekList","currentSeg","nextSeg","beforeDanmakuList","getBeforeDanmaku","longDanmakuList","getLongDanmaku","concat","t","seg","timeline","getTime","onCurrentDanmaku","isPlaying","seconds","milliseconds","seek","play","timeoutTimer","window","setTimeout","intervalTimer","setInterval","emitCurrentDanmaku","clearTimeout","pause","clearInterval","stageSize","createDom","container","document","createElement","classList","setAttribute","String","style","position","display","transformOrigin","innerHTML","whiteSpace","transform","anchor","fontSize","setRelativeSize","size","relative","color","getColorString","fontWeight","bold","fontFamily","font","textShadow","shadow","webkitTextStroke","stroke","appendChild","value","toString","padStart","addAnimation","getStyleSheet","stylesheet","aniId","rotation","scale","innerText","getCssTransform","getCssAnimation","getCssAnimationDelay","css_translate","css_rotateX","css_rotateY","css_rotateZ","css_scale","animationLine","ease","offset","delay","delayLine","domRenderer","DomRenderer","animationRenderer","AnimationRenderer","render","danmakuDom","perspective","el","width","height","transformStyle","resize","renderer","Renderer","addFromList","addEventListener","once","e","animationName","substring","removeChild","animationDelay","mount","danElement","remove_id","element","querySelector","remove_rid","getBoundingClientRect","left","top","playTime","startStamp","isPaused","danmakuParser","DanmakuParser","Timeline","timelineDriver","TimelineDriver","stage","Stage","Date","now","loadDanmaku","dList","addDanmaku","playDanmaku","refresh","clearDanmaku","reset","config","controller","Controller","getDanmaku","autoResize","undefined","reload","globalThis","MfunsPosDanmaku"],"sourceRoot":""}